{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/scripts/index.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n    }\n];\n","const myToken = '03a967f6-55ee-4e4e-b7f8-c5d21e5db7dc';\nconst serverAdress = 'https://nomoreparties.co/v1/wff-cohort-16/';\n\n// Функция проверки успешности запроса\nfunction handleResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  // если ошибка, отклоняем промис\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\n\n// GET-запрос для получения данных о пользователе\nexport function getUserData() {\n  return fetch(`${serverAdress}users/me`, {\n    headers: {\n      authorization: myToken\n    }\n  })\n  .then(handleResponse)\n}\n\n// GET-запрос для подгрузки начальных карточек с сервера\nexport function getInitialCards() {\n  return fetch(`${serverAdress}cards`, {\n    headers: {\n      authorization: myToken\n    }\n  })\n  .then(handleResponse)\n}\n\n// PATCH-запрос для редактирования данных профиля\nexport function editProfile(data) {\n  return fetch(`${serverAdress}users/me`, {\n    method: 'PATCH',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about\n    })\n  });\n}\n\n// POST-запрос для добавлени новой карточки\nexport function addCard(data) {\n  return fetch(`${serverAdress}cards`, {\n    method: 'POST',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about,\n      link: data.link\n    })\n  })\n  .then(handleResponse)\n}\n\n// DELETE-запрос для удаления карточки\nexport function deleteCardfromServer(card) {\n  return fetch(`${serverAdress}cards/${card._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    }\n  })\n  // .then((res) => {\n  //   return res.json();\n  // })\n}\n\n// PUT-запрос для добавления лайка карточки\nexport function likeCard(card) {\n  return fetch(`${serverAdress}cards/likes/${card._id}`, {\n    method: 'PUT',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      likes: card.likes,\n      _id: card._id\n    })\n  }\n)\n    .then(handleResponse)\n}\n\n// DELETE-запрос для удаления лайка карточки\nexport function deleteLikeCard(card) {\n  return fetch(`${serverAdress}cards/likes/${card._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: myToken,\n    },\n    body: JSON.stringify({\n      likes: card.likes,\n      _id: card._id\n    })\n  })\n  .then(handleResponse)\n}\n\n// PATCH-запрос для обновления аватара пользователя\nexport function editProfileImage(data) {\n  return fetch(`${serverAdress}users/me/avatar`, {\n    method: 'PATCH',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      avatar: data.avatar\n    })\n  })\n  .then(handleResponse)\n}\n","import {deleteCardfromServer, likeCard, deleteLikeCard} from \"./api\";\nconst cardTemplate = document.querySelector('#card-template').content;\n\n// Функция удаления карточки\nexport function deleteCard(cardItem) {\n  // deleteCardfromServer(cardItem);\n  // console.log(cardItem);\n  cardItem.remove();\n}\n\n// Функция создания карточки\nexport function createCard(item, handleClickCard, handleLikeCard, userId) {\n  const cardElement = cardTemplate.querySelector('.card').cloneNode(true);\n  const cardTitle = cardElement.querySelector('.card__title');\n  const cardImage = cardElement.querySelector('.card__image');\n  cardImage.src = item.link;\n  cardImage.alt = `Фото. Пейзаж. ${item.name}`;\n  cardTitle.textContent = item.name;\n\n  const deleteButton = cardElement.querySelector('.card__delete-button');\n\n  // console.log(item.owner._id, 'Автор карточки');\n  // При создании карточки проверяем, кто её автор. Если я, то скрываем кнопку удаления\n  if (!(item.owner._id === userId)) {\n    deleteButton.classList.add('hidden');\n    console.log('Эта карточка создана не мной.  id автора: ', item.owner._id);\n  };\n\n  deleteButton.addEventListener('click', () => {\n    deleteCardfromServer(item)\n    .then(() => deleteCard(cardElement))\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    })\n  });\n\n  // Навешиваем слушатель клика по карточке\n  cardImage.addEventListener('click', () => handleClickCard(cardImage, cardTitle.textContent));\n\n  const cardLikeCounter = cardElement.querySelector('.card__like-counter');\n  cardLikeCounter.textContent = item.likes.length;\n  const cardLikeButton = cardElement.querySelector('.card__like-button');\n\n  // При создании карточки проверяем, была ли она лайкнута мной. Если да, закрашиваем сердечко.\n  if (item.likes.some(user => {\n    return user._id === userId\n  })) {\n    cardLikeButton.classList.add('card__like-button_is-active');\n    // console.log('Есть мой лайк!');\n  }\n\n  // Если карточка уже была лайкнута мной, навешиваем флаг\n  // const isLikedCard = cardLikeButton.classList.contains('card__like-button_is-active');\n\n  // Навешиваем слушатель клика по кнопке лайка\n  cardLikeButton.addEventListener('click', () => {\n    handleLikeCard(cardLikeButton, cardLikeCounter, item);\n  })\n\n  return cardElement;\n};\n\n// Функция обработки клика по кнопке лайка\nexport function handleLikeCard(button, counter, item) {\n\n  // Навешиваем флаг в зависимости от того, лайкнута МНОЙ карточка или нет\n  const isLikedCard = button.classList.contains('card__like-button_is-active');\n  if(!isLikedCard) {\n    // console.log('лАЙКАЕМ!');\n    likeCard(item)\n    .then((data) => {\n      counter.textContent = data.likes.length;\n      button.classList.toggle('card__like-button_is-active');\n      })\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    });\n  } else {\n    // console.log('Дизлайк, отписка')\n    deleteLikeCard(item)\n    .then((data) => {\n      counter.textContent = data.likes.length;\n      button.classList.toggle('card__like-button_is-active');\n    })\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    });\n  }\n}\n\n\n\n\n","// Работа модальных окон\n\n//Открытие модального окна\nexport function openModal(popup){\n  popup.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeByEscape)\n};\n\n// Закрытие модального окна\nexport function closeModal(popup) {\n  popup.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closeByEscape);\n};\n\nexport function closeByEscape(evt) {\n  if (evt.key === 'Escape') {\n    const modalIsOpened = document.querySelector('.popup_is-opened');\n    closeModal(modalIsOpened);\n    //modalIsOpened.classList.remove('popup_is-opened');\n  }\n}\n\n// Закрытие модального окна по нажатию Esc. Работает.\n/*export function closeModalByEsc(popup) {\n  document.addEventListener('keydown', function(evt) {\n    if (evt.key === 'Escape') {\n      popup.classList.remove('popup_is-opened');\n      document.removeEventListener('keydown', closeModalByEsc);\n    }\n  })\n}*/\n\n\n\n\n","import { validationConfig } from \"../scripts/index\";\n\n// Валидация форм\n\n//Функция отображения сообщения об ошибке\nexport function showInputError (formElement, inputElement, errorMessage, validationConfig) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add(validationConfig.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(validationConfig.errorClass);\n};\n\n// Функция, которая скрывает сообщение об ошибке\nexport function hideInputError(formElement, inputElement, validationConfig) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove(validationConfig.inputErrorClass);\n  errorElement.classList.remove(validationConfig.errorClass);\n  errorElement.textContent = '';\n};\n\n// Функция для проверки валидных полей\nexport function checkInputValidity(formElement, inputElement, validationConfig) {\n  if (inputElement.validity.patternMismatch) {\n    // встроенный метод setCustomValidity принимает на вход строку\n    // и заменяет ею стандартное сообщение об ошибке\n  inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    // если передать пустую строку, то будут доступны\n    // стандартные браузерные сообщения\n  inputElement.setCustomValidity(\"\");\n  }\n\n  if (!inputElement.validity.valid) {\n    // теперь, если ошибка вызвана регулярным выражением,\n    // переменная validationMessage хранит наше кастомное сообщение\n    showInputError(formElement, inputElement, inputElement.validationMessage, validationConfig);\n  } else {\n    hideInputError(formElement, inputElement, validationConfig);\n  }\n};\n\n// Функция навешивает слушатель для проверки всех полей формы на валидность\nexport function setEventListeners(formElement, validationConfig) {\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, validationConfig);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement, validationConfig);\n      toggleButtonState(inputList, buttonElement, validationConfig);\n    });\n  });\n};\n\n// Функция навешивает слушатель для проверки всех форм на валидность\nexport function enableValidation(validationConfig) {\n  const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\n  formList.forEach((formElement) => {\n    formElement.addEventListener('submit', function(evt) {\n      evt.preventDefault();\n    })\n    setEventListeners(formElement, validationConfig);\n  })\n}\n\n// Функция проверяет наличие невалидных инпутов\nexport function hasInvalidInput(inputList, validationConfig) {\n  return inputList.some((inputElement) => {\n        // Если поле не валидно, колбэк вернёт true\n    // Обход массива прекратится и вся функция\n    // hasInvalidInput вернёт true\n\n    return !inputElement.validity.valid;\n  })\n}\n\n// Функция добавляет/убирает сообщения об ошибках при неверном заполнении полей\n// и меняет стили кнопок\nexport function toggleButtonState(inputList, buttonElement, validationConfig) {\n  if (hasInvalidInput(inputList, validationConfig)) {\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\n    buttonElement.setAttribute('disabled', '');\n  } else {\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n    buttonElement.removeAttribute('disabled');\n  }\n}\n\n// Функция, которая очищает ошибки валидации формы и делает кнопку неактивной\nexport function clearValidation(formElement, validationConfig) {\n  const inputElements = formElement.querySelectorAll(validationConfig.Selector);\n  inputElements.forEach((item) => {\n    hideInputError(formElement, item, validationConfig);\n  })\n}\n","import {initialCards, /*handleClickCard*/ } from './cards.js';\nimport {createCard} from '../components/cards.js'\nimport {openModal, closeModal} from '../components/modal.js';\nimport {enableValidation, showInputError, hideInputError, checkInputValidity, setEventListeners, hasInvalidInput, toggleButtonState, clearValidation} from '../components/validation.js';\nimport {getUserData, getInitialCards, editProfile, addCard, likeCard, editProfileImage, deleteLikeCard} from '../components/api.js';\nimport {handleLikeCard, isLikedCard} from '../components/cards.js'\n\nconst modalImage = document.querySelector('.popup_type_image');\nconst cardImage = document.querySelector('.popup_type_image .popup__content .popup__image');\nconst cardImageCaption = document.querySelector('.popup_type_image .popup__content .popup__caption');\nconst editButton = document.querySelector('.profile__edit-button');\nconst placesList = document.querySelector('.page .content .places__list');\nconst cardTemplate = document.querySelector('#card-template').content;\nconst popupEditWindow = document.querySelector('.popup_type_edit');\nconst profileAddButton = document.querySelector('.profile__add-button');\nconst popupNewCard = document.querySelector('.popup_type_new-card');\nconst popupsModal = document.querySelectorAll(\".popup\");\nconst formElement = popupEditWindow.querySelector('.popup__form');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst jobInput = document.querySelector('.popup__input_type_description');\nconst createCardPopup = document.querySelector('.popup_type_new-card');\nconst createCardFormElement = createCardPopup.querySelector('.popup_type_new-card .popup__content .popup__form');\nconst cardNameInput = document.querySelector('.popup__input_type_card-name');\nconst cardUrlInput = document.querySelector('.popup__input_type_url');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\nconst profileImage = document.querySelector('.profile__image');\nconst profileImageEdit = document.querySelector('.profile__image-edit');\nconst popupProfileImage = document.querySelector('.popup_type_edit-avatar');\nconst profileImageUrlInput = document.querySelector('.popup_type_edit-avatar .popup__content .popup__form .popup__input_type_url');\nconst editProfileImageFormElement = document.querySelector('.popup_type_edit-avatar .popup__content .popup__form');\nlet userId;\n// let submitButton;\n\n// // Загрузка данных о пользователе с сервера\n// getUserData().then((data) => {\n//   // console.log('Это имя пользователя с сервера: ', data.name);\n//   console.log('Это данные о пользовтаеле с сервера: ', data);\n//   // console.log('Ссылка на аватар', data.avatar);\n// })\n\nPromise.all([getUserData(), getInitialCards()])\n.then(([userData, cardsArr]) => {\n  profileTitle.textContent = userData.name;\n  profileDescription.textContent = userData.about;\n  userId = userData._id;\n  profileImage.setAttribute('style', `background-image: url(${userData.avatar})`);\n  cardsArr.forEach(function(item) {\n    const newCard = createCard(item, handleClickCard, handleLikeCard, userId);\n\n    placesList.append(newCard);\n  })\n})\n.catch((err) => {\n  console.log('Ошибка. Запрос не выполнен: ', err);\n});\n\n// getUserData().then((data) => {\n//   profileTitle.textContent = data.name;\n//   profileDescription.textContent = data.about;\n//   profileImage.setAttribute('style', `background-image: url(${data.avatar})`);\n// })\n\n// // Загрузка карточек с сервера\n// getInitialCards().then((cardsArr) => {\n//   console.log('Это список карточек', cardsArr);\n//   cardsArr.forEach(function(item) {\n//     const newCard = createCard(item, handleClickCard, handleLikeCard);\n//     // console.log(item.name);\n//     // console.log(item.link);\n//     // console.log('Количество лайков карточки: ', item.likes.length);\n//     placesList.append(newCard);\n//     const cardLikeCounter = newCard.querySelector('.card__like-counter');\n//     cardLikeCounter.textContent = item.likes.length;\n//   })\n// })\n\n// // Добавление новой карточки\n// addCard().then((card) => {\n//   // console.log('Это новая карточка', card);\n//   const newCard = createCard(card, handleClickCard, handleLikeCard);\n//   placesList.prepend(newCard);\n// })\n\n// Обработчик \"отправки\" формы редактирования изображения профиля (автара)\nfunction handleFormEditProfileImage(evt) {\n  evt.preventDefault();\n  const item = {avatar: ''};\n  item.avatar = profileImageUrlInput.value;\n  const submitButton = evt.submitter;\n  renderLoading(true, submitButton);\n  // const modalIsOpened = document.querySelector('.popup_is-opened');\n\n  editProfileImage(item)\n  // .then((res) => console.log(res.avatar))\n  .then((data) => {\n    profileImage.setAttribute('style', `background-image: url(${data.avatar})`)\n  })\n  .then(() => {\n    closeModal(popupProfileImage);\n  })\n  .finally(() => {\n    renderLoading(false, submitButton);\n  })\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// Обработчик «отправки» формы редактирования профиля (имя, занятие)\nfunction handleFormSubmit(evt) {\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\n\n  const user = {name: '', about: '', avatar: ''};\n  // Значения полей jobInput и nameInput из свойства value\n  user.name = nameInput.value;\n  user.about = jobInput.value;\n\n  const submitButton = evt.submitter;\n  renderLoading(true, submitButton);\n  // const modalIsOpened = document.querySelector('.popup_is-opened');\n  // Обновление данных профиля\n  editProfile(user)\n  .then(() => {\n    // Вставка новых значений с помощью textContent\n    profileTitle.textContent = nameInput.value;\n    profileDescription.textContent = jobInput.value;\n  })\n  .then(() => {\n    closeModal(popupEditWindow);\n  })\n  .finally(() => {\n    renderLoading(false,submitButton);\n  })\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// Обработчик «отправки» формы добавления карточки (название, ссылка)\nfunction handleFormCreateCard(evt) {\n  evt.preventDefault();\n  const item = {name: '' , link: ''};\n  item.name = cardNameInput.value;\n  item.link = cardUrlInput.value;\n\n  const submitButton = evt.submitter;\n  renderLoading(true, submitButton);\n  // const modalIsOpened = document.querySelector('.popup_is-opened');\n  const saveButton = popupNewCard.querySelector('.popup__button');\n  // Добавление новой карточки\n  addCard(item)\n  .then((data) => {\n    const newCard = createCard(data, handleClickCard, handleLikeCard, userId);\n    placesList.prepend(newCard);\n  })\n  .then(() => console.log(userId))\n  .then(() => {\n    closeModal(popupNewCard);\n  })\n  .then(() => {\n    // Очистка инпутов формы карточки после закрытия модального окна\n    cardNameInput.value = '';\n    cardUrlInput.value = '';\n\n    // Делаем кнопку сохранения неактивной\n    // (Иначе, форма открывается после успешного сабмита\n    // с пустыми значениями в полях и с активной кнопкой сабмита)\n    saveButton.classList.add('button_inactive');\n    saveButton.setAttribute('disabled', '');\n  })\n  .finally(() => {\n    renderLoading(false, submitButton);\n  })\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// Функция, отображающая надпись \"Сохранение...\" на кнопке сохранения, пока идёт загрузка\n\nfunction renderLoading(isLoading, submitButton) {\n  // const popupSaveButton = document.querySelector('.popup__button');\n  if (isLoading) {\n    submitButton.textContent = 'Сохранение...';\n  } else {\n    submitButton.textContent = 'Сохранить';\n  }\n}\n\n// Отображение шести карточек при открытии страницы (Использовалось при выполнении ПР5, ПР6)\n// initialCards.forEach(function(item){\n//   //const name = item.name;\n//   //const link = item.link;\n//   const newCard = createCard(item, handleClickCard, handleLikeCard);\n//   placesList.append(newCard);\n// })\n\n// Обработчик нажатия на кнопку редактирования аватара профиля\nprofileImageEdit.addEventListener('click', function() {\n  const profileImageEditForm = popupProfileImage.querySelector('.popup__form')\n  clearValidation(profileImageEditForm, validationConfig);\n  openModal(popupProfileImage);\n})\n\n// Обработчик нажатия на кнопку редактирования имени и описания профиля\neditButton.addEventListener('click', function(){\n  const profileEditForm = popupEditWindow.querySelector('.popup__form')\n  clearValidation(profileEditForm, validationConfig);\n  openModal(popupEditWindow);\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n});\n\n// Обработчик нажатия на кнопку добавления карточки\nprofileAddButton.addEventListener('click', function(){\n  const newCardForm = popupNewCard.querySelector('.popup__form')\n  clearValidation(newCardForm, validationConfig);\n  openModal(popupNewCard)});\n\npopupsModal.forEach((popup) => {\n  popup.addEventListener('click', function(evt) {\n    if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close')) {\n      closeModal(popup)\n    }\n  });\n});\n\n// Прикрепляем обработчик к форме: он будет следить за событием “submit” - «отправка»\nformElement.addEventListener('submit', handleFormSubmit);\n\ncreateCardFormElement.addEventListener('submit', handleFormCreateCard);\n\neditProfileImageFormElement.addEventListener('submit', handleFormEditProfileImage);\n\n// Функция обработки клика по карточке (открытие изображения в модальном окне)\nexport function handleClickCard(item, title) {\n  cardImage.src = item.src;\n  cardImage.alt = item.alt;\n  cardImageCaption.textContent = title;\n  openModal(modalImage);\n}\n\n// Функция, которая отвечает за включение валидации всех форм.\n// Она принимает все нужные функциям классы\n// и селекторы элементов как объект настроек.\nexport const validationConfig = ({\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'button_inactive',\n  inputErrorClass: 'form__input_type_error',\n  errorClass: 'form__input-error_active'\n});\n\nenableValidation(validationConfig);\n\n// @todo: Темплейт карточки\n\n/*createCard('Это имя', 'А это ссылка');*/\n// @todo: DOM узлы\n\n// @todo: Функция создания карточки\n\n// @todo: Функция удаления карточки\n\n// @todo: Вывести карточки на страницу\n","import './pages/index.css'; // добавьте импорт главного файла стилей\nimport './scripts/index.js';\nimport './components/api.js'\nconsole.log('Hello, World!')\n\n\n\n// Стрелочная функция. Не запнётся ли на ней Internet Explorer?\n// const doubledNumbers = numbers.map(number => number * 2);\n\n"],"names":["myToken","serverAdress","handleResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","createCard","item","handleClickCard","handleLikeCard","userId","cardElement","cloneNode","cardTitle","cardImage","src","link","alt","name","textContent","deleteButton","owner","_id","classList","add","console","log","addEventListener","card","fetch","method","headers","authorization","then","remove","catch","err","cardLikeCounter","likes","length","cardLikeButton","some","user","button","counter","contains","body","JSON","stringify","deleteLikeCard","data","toggle","openModal","popup","closeByEscape","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","inactiveButtonClass","removeAttribute","setAttribute","clearValidation","querySelectorAll","Selector","forEach","modalImage","cardImageCaption","editButton","placesList","popupEditWindow","profileAddButton","popupNewCard","popupsModal","nameInput","jobInput","createCardFormElement","cardNameInput","cardUrlInput","profileTitle","profileDescription","profileImage","profileImageEdit","popupProfileImage","profileImageUrlInput","editProfileImageFormElement","renderLoading","isLoading","submitButton","title","all","_ref","_ref2","userData","cardsArr","about","avatar","newCard","append","value","target","preventDefault","submitter","finally","saveButton","prepend","formSelector","inputSelector","submitButtonSelector","Array","from","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","enableValidation"],"sourceRoot":""}