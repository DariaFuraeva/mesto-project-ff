{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/scripts/index.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n    }\n];\n","const myToken = '03a967f6-55ee-4e4e-b7f8-c5d21e5db7dc';\nconst serverAdress = 'https://nomoreparties.co/v1/wff-cohort-16/';\n\n// GET-запрос для получения данных о пользователе\nexport function getUserData() {\n  return fetch(`${serverAdress}users/me`, {\n    headers: {\n      authorization: myToken\n    }\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// GET-запрос для подгрузки начальных карточек с сервера\nexport function getInitialCards() {\n  return fetch(`${serverAdress}cards`, {\n    headers: {\n      authorization: myToken\n    }\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// PATCH-запрос для редактирования данных профиля\nexport function editProfile(data) {\n  return fetch(`${serverAdress}users/me`, {\n    method: 'PATCH',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about\n    })\n  });\n}\n\n// POST-запрос для добавлени новой карточки\nexport function addCard(data) {\n  return fetch(`${serverAdress}cards`, {\n    method: 'POST',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about,\n      link: data.link\n    })\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// DELETE-запрос для удаления карточки\nexport function deleteCardfromServer(card) {\n  return fetch(`${serverAdress}cards/${card._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    }\n  })\n  // .then((res) => {\n  //   return res.json();\n  // })\n}\n\n// PUT-запрос для добавления лайка карточки\nexport function likeCard(card) {\n  return fetch(`${serverAdress}cards/likes/${card._id}`, {\n    method: 'PUT',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      likes: card.likes,\n      _id: card._id\n    })\n  }\n)\n  .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      // если ошибка, отклоняем промис\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    });\n}\n\n// DELETE-запрос для удаления лайка карточки\nexport function deleteLikeCard(card) {\n  return fetch(`${serverAdress}cards/likes/${card._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: myToken,\n    },\n    body: JSON.stringify({\n      likes: card.likes,\n      _id: card._id\n    })\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// PATCH-запрос для обновления аватара пользователя\nexport function editProfileImage(data) {\n  return fetch(`${serverAdress}users/me/avatar`, {\n    method: 'PATCH',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      avatar: data.avatar\n    })\n  })\n  .then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    // если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  })\n\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n","import { deleteCardfromServer} from \"./api\";\nconst cardTemplate = document.querySelector('#card-template').content;\nconst myId = '9ba15da7537acf3e06b7d4bc';\n\n// Функция удаления карточки\nexport function deleteCard(cardItem) {\n  // deleteCardfromServer(cardItem);\n  // console.log(cardItem);\n  cardItem.remove();\n}\n\n// Функция создания карточки\nexport function createCard(item, handleClickCard, handleLikeCard, userId) {\n  const cardElement = cardTemplate.querySelector('.card').cloneNode(true);\n  const cardTitle = cardElement.querySelector('.card__title');\n  const cardImage = cardElement.querySelector('.card__image');\n  cardImage.src = item.link;\n  cardImage.alt = `Фото. Пейзаж. ${item.name}`;\n  cardTitle.textContent = item.name;\n\n  const deleteButton = cardElement.querySelector('.card__delete-button');\n  deleteButton.addEventListener('click', () => {\n    deleteCardfromServer(item)\n    .then(() => deleteCard(cardElement))\n\n  });\n\n  // Навешиваем слушатель клика по карточке\n  cardImage.addEventListener('click', () => handleClickCard(cardImage, cardTitle.textContent));\n\n  userId = myId;\n  const cardLikeCounter = cardElement.querySelector('.card__like-counter');\n  cardLikeCounter.textContent = item.likes.length;\n  const cardLikeButton = cardElement.querySelector('.card__like-button');\n\n  // При создании карточки проверяем, была ли она лайкнута мной. Если да, закрашиваем сердечко.\n  if (item.likes.some(user => {\n    return user._id === myId\n  })) {\n    cardLikeButton.classList.add('card__like-button_is-active');\n  }\n\n  // Если карточка уже была лайкнута мной, навешиваем флаг\n  let likedCardFlag = false;\n  if (cardLikeButton.classList.contains('card__like-button_is-active')) {\n    likedCardFlag = true;\n  } else {\n    likedCardFlag = false;\n  }\n\n  // Навешиваем слушатель клика по кнопке лайка\n  cardLikeButton.addEventListener('click', () => {\n    handleLikeCard(cardLikeButton, likedCardFlag, cardLikeCounter, item);\n  })\n\n  return cardElement;\n};\n\n\n\n\n\n","// Работа модальных окон\n\n//Открытие модального окна\nexport function openModal(popup){\n  popup.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeByEscape)\n};\n\n// Закрытие модального окна\nexport function closeModal(popup) {\n  popup.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closeByEscape);\n};\n\nexport function closeByEscape(evt) {\n  if (evt.key === 'Escape') {\n    const modalIsOpened = document.querySelector('.popup_is-opened');\n    closeModal(modalIsOpened);\n    //modalIsOpened.classList.remove('popup_is-opened');\n  }\n}\n\n// Закрытие модального окна по нажатию Esc. Работает.\n/*export function closeModalByEsc(popup) {\n  document.addEventListener('keydown', function(evt) {\n    if (evt.key === 'Escape') {\n      popup.classList.remove('popup_is-opened');\n      document.removeEventListener('keydown', closeModalByEsc);\n    }\n  })\n}*/\n\n\n\n\n","// Валидация форм\n\n//Функция отображения сообщения об ошибке\nexport function showInputError (formElement, inputElement, errorMessage) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add('form__input_type_error');\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add('form__input-error_active');\n};\n\n// Функция, которая скрывает сообщение об ошибке\nexport function hideInputError(formElement, inputElement) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove('form__input_type_error');\n  errorElement.classList.remove('form__input-error_active');\n  errorElement.textContent = '';\n};\n\n// Функция для проверки валидных полей\nexport function checkInputValidity(formElement, inputElement) {\n  if (inputElement.validity.patternMismatch) {\n    // встроенный метод setCustomValidity принимает на вход строку\n    // и заменяет ею стандартное сообщение об ошибке\n  inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    // если передать пустую строку, то будут доступны\n    // стандартные браузерные сообщения\n  inputElement.setCustomValidity(\"\");\n  }\n\n  if (!inputElement.validity.valid) {\n    // теперь, если ошибка вызвана регулярным выражением,\n    // переменная validationMessage хранит наше кастомное сообщение\n    showInputError(formElement, inputElement, inputElement.validationMessage);\n  } else {\n    hideInputError(formElement, inputElement);\n  }\n};\n\n// Функция навешивает слушатель для проверки всех полей формы на валидность\nexport function setEventListeners(formElement) {\n  const inputList = Array.from(formElement.querySelectorAll('.popup__input'));\n  const buttonElement = formElement.querySelector('.popup__button');\n  toggleButtonState(inputList, buttonElement);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement);\n      toggleButtonState(inputList, buttonElement);\n    });\n  });\n};\n\n// Функция навешивает слушатель для проверки всех форм на валидность\nexport function enableValidation() {\n  const formList = Array.from(document.querySelectorAll('.popup__form'));\n  formList.forEach((formElement) => {\n    formElement.addEventListener('submit', function(evt) {\n      evt.preventDefault();\n    })\n    setEventListeners(formElement);\n  })\n}\n\n// Функция проверяет наличие невалидных инпутов\nexport function hasInvalidInput(inputList) {\n  return inputList.some((inputElement) => {\n        // Если поле не валидно, колбэк вернёт true\n    // Обход массива прекратится и вся функция\n    // hasInvalidInput вернёт true\n\n    return !inputElement.validity.valid;\n  })\n}\n\n// Функция добавляет/убирает сообщения об ошибках при неверном заполнении полей\n// и меняет стили кнопок\nexport function toggleButtonState(inputList, buttonElement) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.classList.add('button_inactive');\n    buttonElement.setAttribute('disabled', '');\n  } else {\n    buttonElement.classList.remove('button_inactive');\n    buttonElement.removeAttribute('disabled');\n  }\n}\n\n// Функция, которая очищает ошибки валидации формы и делает кнопку неактивной\nexport function clearValidation(form, validationConfig) {\n  const modal = form.querySelector('.popup__input');\n\n}\n","import {initialCards, /*handleClickCard*/ } from './cards.js';\nimport {createCard} from '../components/cards.js'\nimport {openModal, closeModal, closeByEscape/*closeModalByEsc*/} from '../components/modal.js';\nimport {enableValidation, showInputError, hideInputError, checkInputValidity, setEventListeners, hasInvalidInput, toggleButtonState} from '../components/validation.js';\nimport {getUserData, getInitialCards, editProfile, addCard, likeCard, editProfileImage, deleteLikeCard} from '../components/api.js';\n\nconst modalImage = document.querySelector('.popup_type_image');\nconst cardImage = document.querySelector('.popup_type_image .popup__content .popup__image');\nconst cardImageCaption = document.querySelector('.popup_type_image .popup__content .popup__caption');\nconst editButton = document.querySelector('.profile__edit-button');\nconst placesList = document.querySelector('.page .content .places__list');\nconst cardTemplate = document.querySelector('#card-template').content;\nconst popupEditWindow = document.querySelector('.popup_type_edit');\nconst profileAddButton = document.querySelector('.profile__add-button');\nconst popupNewCard = document.querySelector('.popup_type_new-card');\nconst popupsModal = document.querySelectorAll(\".popup\");\nconst formElement = document.querySelector('.popup__form');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst jobInput = document.querySelector('.popup__input_type_description');\nconst createCardPopup = document.querySelector('.popup_type_new-card');\nconst createCardFormElement = createCardPopup.querySelector('.popup_type_new-card .popup__content .popup__form');\nconst cardNameInput = document.querySelector('.popup__input_type_card-name');\nconst cardUrlInput = document.querySelector('.popup__input_type_url');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\nconst profileImage = document.querySelector('.profile__image');\nconst profileImageEdit = document.querySelector('.profile__image-edit');\nconst popupProfileImage = document.querySelector('.popup_type_edit-avatar');\nconst profileImageUrlInput = document.querySelector('.popup_type_edit-avatar .popup__content .popup__form .popup__input_type_url');\nconst editProfileImageFormElement = document.querySelector('.popup_type_edit-avatar .popup__content .popup__form');\n\n// // Загрузка данных о пользователе с сервера\n// getUserData().then((data) => {\n//   // console.log('Это имя пользователя с сервера: ', data.name);\n//   console.log('Это данные о пользовтаеле с сервера: ', data);\n//   // console.log('Ссылка на аватар', data.avatar);\n// })\n\nPromise.all([getUserData(), getInitialCards()])\n.then(([userData, cardsArr]) => {\n  profileTitle.textContent = userData.name;\n  profileDescription.textContent = userData.about;\n  profileImage.setAttribute('style', `background-image: url(${userData.avatar})`);\n  cardsArr.forEach(function(item) {\n    const newCard = createCard(item, handleClickCard, handleLikeCard);\n    //console.log(item);\n    // console.log(item.link);\n    // console.log('Количество лайков карточки: ', item.likes.length);\n    placesList.append(newCard);\n    // const cardLikeCounter = newCard.querySelector('.card__like-counter');\n    // cardLikeCounter.textContent = item.likes.length;\n\n    const deleteButton = newCard.querySelector('.card__delete-button');\n    const myId = '9ba15da7537acf3e06b7d4bc';\n    // console.log(item.owner._id, 'Автор карточки');\n    if (!(item.owner._id === myId)) {\n      // deleteButton.setAttribute('disabled', '');\n      deleteButton.classList.add('hidden');\n    };\n  })\n})\n\n// getUserData().then((data) => {\n//   profileTitle.textContent = data.name;\n//   profileDescription.textContent = data.about;\n//   profileImage.setAttribute('style', `background-image: url(${data.avatar})`);\n// })\n\n// // Загрузка карточек с сервера\n// getInitialCards().then((cardsArr) => {\n//   console.log('Это список карточек', cardsArr);\n//   cardsArr.forEach(function(item) {\n//     const newCard = createCard(item, handleClickCard, handleLikeCard);\n//     // console.log(item.name);\n//     // console.log(item.link);\n//     // console.log('Количество лайков карточки: ', item.likes.length);\n//     placesList.append(newCard);\n//     const cardLikeCounter = newCard.querySelector('.card__like-counter');\n//     cardLikeCounter.textContent = item.likes.length;\n//   })\n// })\n\n// // Добавление новой карточки\n// addCard().then((card) => {\n//   // console.log('Это новая карточка', card);\n//   const newCard = createCard(card, handleClickCard, handleLikeCard);\n//   placesList.prepend(newCard);\n// })\n\n// Обработчик \"отправки\" формы редактирования изображения профиля (автара)\nfunction handleFormEditProfileImage(evt) {\n  evt.preventDefault();\n  const item = {avatar: ''};\n  item.avatar = profileImageUrlInput.value;\n  renderLoading(true);\n\n  editProfileImage(item)\n  // .then((res) => console.log(res.avatar))\n  .then((data) => {\n    profileImage.setAttribute('style', `background-image: url(${data.avatar})`)\n  })\n  .finally(() => {\n    renderLoading(false);\n  })\n\n  const modalIsOpened = document.querySelector('.popup_is-opened');\n  closeModal(modalIsOpened);\n}\n\n// Обработчик «отправки» формы редактирования профиля (имя, занятие)\nfunction handleFormSubmit(evt) {\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\n\n  const user = {name: '', about: '', avatar: ''};\n  // Значения полей jobInput и nameInput из свойства value\n  user.name = nameInput.value;\n  user.about = jobInput.value;\n\n  renderLoading(true);\n  // Обновление данных профиля\n  editProfile(user)\n  .finally(() => {\n    renderLoading(false);\n  })\n\n  // Вставка новых значений с помощью textContent\n  profileTitle.textContent = nameInput.value;\n  profileDescription.textContent = jobInput.value;\n  const modalIsOpened = document.querySelector('.popup_is-opened');\n  closeModal(modalIsOpened)\n}\n\n// Обработчик «отправки» формы добавления карточки (название, ссылка)\nfunction handleFormCreateCard(evt) {\n  evt.preventDefault();\n  const item = {name: '' , link: ''};\n  item.name = cardNameInput.value;\n  item.link = cardUrlInput.value;\n\n  renderLoading(true);\n  // Добавление новой карточки\n  addCard(item)\n  .then((data) => {\n    const newCard = createCard(data, handleClickCard, handleLikeCard);\n    placesList.prepend(newCard);\n  })\n  .finally(() => {\n    renderLoading(false);\n  })\n\n  const modalIsOpened = document.querySelector('.popup_is-opened');\n  closeModal(modalIsOpened);\n  cardNameInput.value = '';\n  cardUrlInput.value = '';\n}\n\n// Функция, отображающая надпись \"Сохранение...\" на кнопке сохранения, пока идёт загрузка\nfunction renderLoading(isLoading) {\n  const popupSaveButton = document.querySelector('.popup__button');\n  if (isLoading) {\n    popupSaveButton.textContent = 'Сохранение...';\n  } else {\n    popupSaveButton.textContent = 'Сохранить';\n  }\n}\n\n// Отображение шести карточек при открытии страницы (Использовалось при выполнении ПР5, ПР6)\n// initialCards.forEach(function(item){\n//   //const name = item.name;\n//   //const link = item.link;\n//   const newCard = createCard(item, handleClickCard, handleLikeCard);\n//   placesList.append(newCard);\n// })\n\n// Обработчик нажатия на кнопку редактирования аватара профиля\nprofileImageEdit.addEventListener('click', function() {\n  openModal(popupProfileImage);\n})\n\n// Обработчик нажатия на кнопку редактирования имени и описания профиля\neditButton.addEventListener('click', function(){\n  openModal(popupEditWindow);\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n});\n\n// Обработчик нажатия на кнопку реддобавления карточки\nprofileAddButton.addEventListener('click', function(){\n  openModal(popupNewCard)});\n\npopupsModal.forEach((popup) => {\n  popup.addEventListener('click', function(evt) {\n    if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close')) {\n      closeModal(popup)\n    }\n  });\n});\n\n// Прикрепляем обработчик к форме: он будет следить за событием “submit” - «отправка»\nformElement.addEventListener('submit', handleFormSubmit);\n\ncreateCardFormElement.addEventListener('submit', handleFormCreateCard);\n\neditProfileImageFormElement.addEventListener('submit', handleFormEditProfileImage);\n\n\n\n// Функция обработки клика по кнопке лайка\nexport function handleLikeCard(button, flag, counter, item) {\n  button.classList.toggle('card__like-button_is-active');\n\n  // Навешиваем флаг в зависимости от того, лайкнута МНОЙ карточка или нет\n  if (button.classList.contains('card__like-button_is-active')) {\n    flag = false;\n  } else {\n    flag = true;\n  }\n\n  // В зависимости от значения флага либо добавляем лайк, либо удаляем\n  if (flag === false) {\n    console.log('лАЙКАЕМ!');\n    likeCard(item)\n    .then((data) => {\n      counter.textContent = data.likes.length;\n    })\n  } else {\n    deleteLikeCard(item)\n    .then((data) => {\n      counter.textContent = data.likes.length;\n    })\n  }\n}\n\n// Функция обработки клика по карточке (открытие изображения в модальном окне)\nexport function handleClickCard(item, title) {\n  cardImage.src = item.src;\n  cardImage.alt = item.alt;\n  cardImageCaption.textContent = title;\n  openModal(modalImage);\n}\n\n// Функция, которая отвечает за включение валидации всех форм.\n// Она принимает все нужные функциям классы\n// и селекторы элементов как объект настроек.\nenableValidation({\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n});\n\n// @todo: Темплейт карточки\n\n/*createCard('Это имя', 'А это ссылка');*/\n// @todo: DOM узлы\n\n// @todo: Функция создания карточки\n\n// @todo: Функция удаления карточки\n\n// @todo: Вывести карточки на страницу\n","import './pages/index.css'; // добавьте импорт главного файла стилей\nimport './scripts/index.js';\nimport './components/api.js'\nconsole.log('Hello, World!')\n\n\n\n// Стрелочная функция. Не запнётся ли на ней Internet Explorer?\n// const doubledNumbers = numbers.map(number => number * 2);\n\n"],"names":["myToken","serverAdress","cardTemplate","document","querySelector","content","createCard","item","handleClickCard","handleLikeCard","userId","cardElement","cloneNode","cardTitle","cardImage","src","link","alt","concat","name","textContent","addEventListener","card","fetch","_id","method","headers","authorization","then","remove","cardLikeCounter","likes","length","cardLikeButton","some","user","classList","add","likedCardFlag","contains","openModal","popup","closeByEscape","closeModal","removeEventListener","evt","key","toggleButtonState","inputList","buttonElement","inputElement","validity","valid","hasInvalidInput","removeAttribute","setAttribute","modalImage","cardImageCaption","editButton","placesList","popupEditWindow","profileAddButton","popupNewCard","popupsModal","querySelectorAll","formElement","nameInput","jobInput","createCardFormElement","cardNameInput","cardUrlInput","profileTitle","profileDescription","profileImage","profileImageEdit","popupProfileImage","profileImageUrlInput","editProfileImageFormElement","renderLoading","isLoading","button","flag","counter","toggle","console","log","body","JSON","stringify","res","ok","json","Promise","reject","status","catch","err","data","deleteLikeCard","title","all","_ref","_ref2","userData","cardsArr","about","avatar","forEach","newCard","append","deleteButton","owner","value","target","preventDefault","finally","prepend","Array","from","patternMismatch","setCustomValidity","dataset","errorMessage","errorElement","id","hideInputError","showInputError","validationMessage","checkInputValidity","setEventListeners"],"sourceRoot":""}