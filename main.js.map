{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/scripts/index.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n    }\n];\n","const myToken = '03a967f6-55ee-4e4e-b7f8-c5d21e5db7dc';\nconst serverAdress = 'https://nomoreparties.co/v1/wff-cohort-16/';\n\n// Функция проверки успешности запроса\nfunction handleResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  // если ошибка, отклоняем промис\n  return Promise.reject(`Ошибка: ${res.status}`);\n}\n\n// GET-запрос для получения данных о пользователе\nexport function getUserData() {\n  return fetch(`${serverAdress}users/me`, {\n    headers: {\n      authorization: myToken\n    }\n  })\n  .then(handleResponse)\n}\n\n// GET-запрос для подгрузки начальных карточек с сервера\nexport function getInitialCards() {\n  return fetch(`${serverAdress}cards`, {\n    headers: {\n      authorization: myToken\n    }\n  })\n  .then(handleResponse)\n}\n\n// PATCH-запрос для редактирования данных профиля\nexport function editProfile(data) {\n  return fetch(`${serverAdress}users/me`, {\n    method: 'PATCH',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about\n    })\n  });\n}\n\n// POST-запрос для добавлени новой карточки\nexport function addCard(data) {\n  return fetch(`${serverAdress}cards`, {\n    method: 'POST',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: data.name,\n      about: data.about,\n      link: data.link\n    })\n  })\n  .then(handleResponse)\n}\n\n// DELETE-запрос для удаления карточки\nexport function deleteCardfromServer(card) {\n  return fetch(`${serverAdress}cards/${card._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    }\n  })\n  // .then((res) => {\n  //   return res.json();\n  // })\n}\n\n// PUT-запрос для добавления лайка карточки\nexport function likeCard(card) {\n  return fetch(`${serverAdress}cards/likes/${card._id}`, {\n    method: 'PUT',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      likes: card.likes,\n      _id: card._id\n    })\n  }\n)\n    .then(handleResponse)\n}\n\n// DELETE-запрос для удаления лайка карточки\nexport function deleteLikeCard(card) {\n  return fetch(`${serverAdress}cards/likes/${card._id}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: myToken,\n    },\n    body: JSON.stringify({\n      likes: card.likes,\n      _id: card._id\n    })\n  })\n  .then(handleResponse)\n}\n\n// PATCH-запрос для обновления аватара пользователя\nexport function editProfileImage(data) {\n  return fetch(`${serverAdress}users/me/avatar`, {\n    method: 'PATCH',\n    headers: {\n      authorization: myToken,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      avatar: data.avatar\n    })\n  })\n  .then(handleResponse)\n}\n","import {deleteCardfromServer, likeCard, deleteLikeCard} from \"./api\";\nconst cardTemplate = document.querySelector('#card-template').content;\n\n// Функция удаления карточки\nexport function deleteCard(cardItem) {\n  // deleteCardfromServer(cardItem);\n  // console.log(cardItem);\n  cardItem.remove();\n}\n\n// Функция создания карточки\nexport function createCard(item, handleClickCard, handleLikeCard, userId) {\n  const cardElement = cardTemplate.querySelector('.card').cloneNode(true);\n  const cardTitle = cardElement.querySelector('.card__title');\n  const cardImage = cardElement.querySelector('.card__image');\n  cardImage.src = item.link;\n  cardImage.alt = `Фото. Пейзаж. ${item.name}`;\n  cardTitle.textContent = item.name;\n\n  const deleteButton = cardElement.querySelector('.card__delete-button');\n\n  // console.log(item.owner._id, 'Автор карточки');\n  userId = item.owner._id;\n  // При создании карточки проверяем, кто её автор. Если я, то скрываем кнопку удаления\n  if (!(item.owner._id === userId)) {\n    // deleteButton.setAttribute('disabled', '');\n    deleteButton.classList.add('hidden');\n  };\n\n  deleteButton.addEventListener('click', () => {\n    deleteCardfromServer(item)\n    .then(() => deleteCard(cardElement))\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    })\n  });\n\n  // Навешиваем слушатель клика по карточке\n  cardImage.addEventListener('click', () => handleClickCard(cardImage, cardTitle.textContent));\n\n  const cardLikeCounter = cardElement.querySelector('.card__like-counter');\n  cardLikeCounter.textContent = item.likes.length;\n  const cardLikeButton = cardElement.querySelector('.card__like-button');\n\n  // При создании карточки проверяем, была ли она лайкнута мной. Если да, закрашиваем сердечко.\n  if (item.likes.some(user => {\n    return user._id === userId\n  })) {\n    cardLikeButton.classList.add('card__like-button_is-active');\n    console.log('Есть мой лайк!');\n  }\n\n  // Если карточка уже была лайкнута мной, навешиваем флаг\n  const isLikedCard = cardLikeButton.classList.contains('card__like-button_is-active');\n\n  // Навешиваем слушатель клика по кнопке лайка\n  cardLikeButton.addEventListener('click', () => {\n    handleLikeCard(cardLikeButton, isLikedCard, cardLikeCounter, item);\n  })\n\n  return cardElement;\n};\n\n// Функция обработки клика по кнопке лайка\nexport function handleLikeCard(button, isLikedCard, counter, item) {\n  button.classList.toggle('card__like-button_is-active');\n\n  // Навешиваем флаг в зависимости от того, лайкнута МНОЙ карточка или нет\n  isLikedCard = button.classList.contains('card__like-button_is-active');\n  if(isLikedCard) {\n    // console.log('лАЙКАЕМ!');\n    likeCard(item)\n    .then((data) => {\n      counter.textContent = data.likes.length;\n      })\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    });\n  } else {\n    // console.log('Дизлайк, отписка')\n    deleteLikeCard(item)\n    .then((data) => {\n      counter.textContent = data.likes.length;\n    })\n    .catch((err) => {\n      console.log('Ошибка. Запрос не выполнен: ', err);\n    });\n  }\n}\n\n\n\n\n","// Работа модальных окон\n\n//Открытие модального окна\nexport function openModal(popup){\n  popup.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeByEscape)\n};\n\n// Закрытие модального окна\nexport function closeModal(popup) {\n  popup.classList.remove('popup_is-opened');\n  document.removeEventListener('keydown', closeByEscape);\n};\n\nexport function closeByEscape(evt) {\n  if (evt.key === 'Escape') {\n    const modalIsOpened = document.querySelector('.popup_is-opened');\n    closeModal(modalIsOpened);\n    //modalIsOpened.classList.remove('popup_is-opened');\n  }\n}\n\n// Закрытие модального окна по нажатию Esc. Работает.\n/*export function closeModalByEsc(popup) {\n  document.addEventListener('keydown', function(evt) {\n    if (evt.key === 'Escape') {\n      popup.classList.remove('popup_is-opened');\n      document.removeEventListener('keydown', closeModalByEsc);\n    }\n  })\n}*/\n\n\n\n\n","import { validationConfig } from \"../scripts/index\";\n\n// Валидация форм\n\n//Функция отображения сообщения об ошибке\nexport function showInputError (formElement, inputElement, errorMessage, validationConfig) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.add(validationConfig.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(validationConfig.errorClass);\n};\n\n// Функция, которая скрывает сообщение об ошибке\nexport function hideInputError(formElement, inputElement, validationConfig) {\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n  inputElement.classList.remove(validationConfig.inputErrorClass);\n  errorElement.classList.remove(validationConfig.errorClass);\n  errorElement.textContent = '';\n};\n\n// Функция для проверки валидных полей\nexport function checkInputValidity(formElement, inputElement, validationConfig) {\n  if (inputElement.validity.patternMismatch) {\n    // встроенный метод setCustomValidity принимает на вход строку\n    // и заменяет ею стандартное сообщение об ошибке\n  inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    // если передать пустую строку, то будут доступны\n    // стандартные браузерные сообщения\n  inputElement.setCustomValidity(\"\");\n  }\n\n  if (!inputElement.validity.valid) {\n    // теперь, если ошибка вызвана регулярным выражением,\n    // переменная validationMessage хранит наше кастомное сообщение\n    showInputError(formElement, inputElement, inputElement.validationMessage, validationConfig);\n  } else {\n    hideInputError(formElement, inputElement, validationConfig);\n  }\n};\n\n// Функция навешивает слушатель для проверки всех полей формы на валидность\nexport function setEventListeners(formElement, validationConfig) {\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n  toggleButtonState(inputList, buttonElement, validationConfig);\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener('input', function () {\n      checkInputValidity(formElement, inputElement, validationConfig);\n      toggleButtonState(inputList, buttonElement, validationConfig);\n    });\n  });\n};\n\n// Функция навешивает слушатель для проверки всех форм на валидность\nexport function enableValidation(validationConfig) {\n  const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\n  formList.forEach((formElement) => {\n    formElement.addEventListener('submit', function(evt) {\n      evt.preventDefault();\n    })\n    setEventListeners(formElement, validationConfig);\n  })\n}\n\n// Функция проверяет наличие невалидных инпутов\nexport function hasInvalidInput(inputList, validationConfig) {\n  return inputList.some((inputElement) => {\n        // Если поле не валидно, колбэк вернёт true\n    // Обход массива прекратится и вся функция\n    // hasInvalidInput вернёт true\n\n    return !inputElement.validity.valid;\n  })\n}\n\n// Функция добавляет/убирает сообщения об ошибках при неверном заполнении полей\n// и меняет стили кнопок\nexport function toggleButtonState(inputList, buttonElement, validationConfig) {\n  if (hasInvalidInput(inputList, validationConfig)) {\n    buttonElement.classList.add(validationConfig.inactiveButtonClass);\n    buttonElement.setAttribute('disabled', '');\n  } else {\n    buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n    buttonElement.removeAttribute('disabled');\n  }\n}\n\n// Функция, которая очищает ошибки валидации формы и делает кнопку неактивной\nexport function clearValidation(formElement, validationConfig) {\n  const inputElements = formElement.querySelectorAll(validationConfig.inputErrorClass);\n  inputElements.forEach((item) => {\n    hideInputError(formElement, item, validationConfig);\n  })\n}\n","import {initialCards, /*handleClickCard*/ } from './cards.js';\nimport {createCard} from '../components/cards.js'\nimport {openModal, closeModal} from '../components/modal.js';\nimport {enableValidation, showInputError, hideInputError, checkInputValidity, setEventListeners, hasInvalidInput, toggleButtonState, clearValidation} from '../components/validation.js';\nimport {getUserData, getInitialCards, editProfile, addCard, likeCard, editProfileImage, deleteLikeCard} from '../components/api.js';\nimport {handleLikeCard} from '../components/cards.js'\n\nconst modalImage = document.querySelector('.popup_type_image');\nconst cardImage = document.querySelector('.popup_type_image .popup__content .popup__image');\nconst cardImageCaption = document.querySelector('.popup_type_image .popup__content .popup__caption');\nconst editButton = document.querySelector('.profile__edit-button');\nconst placesList = document.querySelector('.page .content .places__list');\nconst cardTemplate = document.querySelector('#card-template').content;\nconst popupEditWindow = document.querySelector('.popup_type_edit');\nconst profileAddButton = document.querySelector('.profile__add-button');\nconst popupNewCard = document.querySelector('.popup_type_new-card');\nconst popupsModal = document.querySelectorAll(\".popup\");\nconst formElement = document.querySelector('.popup__form');\nconst nameInput = document.querySelector('.popup__input_type_name');\nconst jobInput = document.querySelector('.popup__input_type_description');\nconst createCardPopup = document.querySelector('.popup_type_new-card');\nconst createCardFormElement = createCardPopup.querySelector('.popup_type_new-card .popup__content .popup__form');\nconst cardNameInput = document.querySelector('.popup__input_type_card-name');\nconst cardUrlInput = document.querySelector('.popup__input_type_url');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\nconst profileImage = document.querySelector('.profile__image');\nconst profileImageEdit = document.querySelector('.profile__image-edit');\nconst popupProfileImage = document.querySelector('.popup_type_edit-avatar');\nconst profileImageUrlInput = document.querySelector('.popup_type_edit-avatar .popup__content .popup__form .popup__input_type_url');\nconst editProfileImageFormElement = document.querySelector('.popup_type_edit-avatar .popup__content .popup__form');\nlet userId;\n\n// // Загрузка данных о пользователе с сервера\n// getUserData().then((data) => {\n//   // console.log('Это имя пользователя с сервера: ', data.name);\n//   console.log('Это данные о пользовтаеле с сервера: ', data);\n//   // console.log('Ссылка на аватар', data.avatar);\n// })\n\nPromise.all([getUserData(), getInitialCards()])\n.then(([userData, cardsArr]) => {\n  profileTitle.textContent = userData.name;\n  profileDescription.textContent = userData.about;\n  profileImage.setAttribute('style', `background-image: url(${userData.avatar})`);\n  cardsArr.forEach(function(item) {\n    userId = userData._id;\n    const newCard = createCard(item, handleClickCard, handleLikeCard, userId);\n\n    placesList.append(newCard);\n\n    const deleteButton = newCard.querySelector('.card__delete-button');\n    // userId = userData._id;\n  })\n})\n.catch((err) => {\n  console.log('Ошибка. Запрос не выполнен: ', err);\n});\n\n// getUserData().then((data) => {\n//   profileTitle.textContent = data.name;\n//   profileDescription.textContent = data.about;\n//   profileImage.setAttribute('style', `background-image: url(${data.avatar})`);\n// })\n\n// // Загрузка карточек с сервера\n// getInitialCards().then((cardsArr) => {\n//   console.log('Это список карточек', cardsArr);\n//   cardsArr.forEach(function(item) {\n//     const newCard = createCard(item, handleClickCard, handleLikeCard);\n//     // console.log(item.name);\n//     // console.log(item.link);\n//     // console.log('Количество лайков карточки: ', item.likes.length);\n//     placesList.append(newCard);\n//     const cardLikeCounter = newCard.querySelector('.card__like-counter');\n//     cardLikeCounter.textContent = item.likes.length;\n//   })\n// })\n\n// // Добавление новой карточки\n// addCard().then((card) => {\n//   // console.log('Это новая карточка', card);\n//   const newCard = createCard(card, handleClickCard, handleLikeCard);\n//   placesList.prepend(newCard);\n// })\n\n// Обработчик \"отправки\" формы редактирования изображения профиля (автара)\nfunction handleFormEditProfileImage(evt) {\n  evt.preventDefault();\n  const item = {avatar: ''};\n  item.avatar = profileImageUrlInput.value;\n  renderLoading(true);\n  const modalIsOpened = document.querySelector('.popup_is-opened');\n\n  editProfileImage(item)\n  // .then((res) => console.log(res.avatar))\n  .then((data) => {\n    profileImage.setAttribute('style', `background-image: url(${data.avatar})`)\n  })\n  .then(() => {\n    closeModal(modalIsOpened);\n  })\n  .finally(() => {\n    renderLoading(false);\n  })\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// Обработчик «отправки» формы редактирования профиля (имя, занятие)\nfunction handleFormSubmit(evt) {\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\n\n  const user = {name: '', about: '', avatar: ''};\n  // Значения полей jobInput и nameInput из свойства value\n  user.name = nameInput.value;\n  user.about = jobInput.value;\n\n  renderLoading(true);\n  const modalIsOpened = document.querySelector('.popup_is-opened');\n  // Обновление данных профиля\n  editProfile(user)\n  .then(() => {\n    // Вставка новых значений с помощью textContent\n    profileTitle.textContent = nameInput.value;\n    profileDescription.textContent = jobInput.value;\n  })\n  .then(() => {\n    closeModal(modalIsOpened);\n  })\n  .finally(() => {\n    renderLoading(false);\n  })\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// Обработчик «отправки» формы добавления карточки (название, ссылка)\nfunction handleFormCreateCard(evt) {\n  evt.preventDefault();\n  const item = {name: '' , link: ''};\n  item.name = cardNameInput.value;\n  item.link = cardUrlInput.value;\n\n  renderLoading(true);\n  const modalIsOpened = document.querySelector('.popup_is-opened');\n  const saveButton = modalIsOpened.querySelector('.popup__button');\n  // Добавление новой карточки\n  addCard(item)\n  .then((data) => {\n    const newCard = createCard(data, handleClickCard, handleLikeCard);\n    placesList.prepend(newCard);\n  })\n  .then(() => {\n    closeModal(modalIsOpened);\n  })\n  .then(() => {\n    // Очистка инпутов формы карточки после закрытия модального окна\n    cardNameInput.value = '';\n    cardUrlInput.value = '';\n\n    // Делаем кнопку сохранения неактивной\n    // (Иначе, форма открывается после успешного сабмита\n    // с пустыми значениями в полях и с активной кнопкой сабмита)\n    saveButton.classList.add('button_inactive');\n    saveButton.setAttribute('disabled', '');\n  })\n  .finally(() => {\n    renderLoading(false);\n  })\n  .catch((err) => {\n    console.log('Ошибка. Запрос не выполнен: ', err);\n  });\n}\n\n// Функция, отображающая надпись \"Сохранение...\" на кнопке сохранения, пока идёт загрузка\nfunction renderLoading(isLoading) {\n  const popupSaveButton = document.querySelector('.popup__button');\n  if (isLoading) {\n    popupSaveButton.textContent = 'Сохранение...';\n  } else {\n    popupSaveButton.textContent = 'Сохранить';\n  }\n}\n\n// Отображение шести карточек при открытии страницы (Использовалось при выполнении ПР5, ПР6)\n// initialCards.forEach(function(item){\n//   //const name = item.name;\n//   //const link = item.link;\n//   const newCard = createCard(item, handleClickCard, handleLikeCard);\n//   placesList.append(newCard);\n// })\n\n// Обработчик нажатия на кнопку редактирования аватара профиля\nprofileImageEdit.addEventListener('click', function() {\n  const profileImageEditForm = popupProfileImage.querySelector('.popup__form')\n  clearValidation(profileImageEditForm, validationConfig);\n  openModal(popupProfileImage);\n})\n\n// Обработчик нажатия на кнопку редактирования имени и описания профиля\neditButton.addEventListener('click', function(){\n  const profileEditForm = popupEditWindow.querySelector('.popup__form')\n  clearValidation(profileEditForm, validationConfig);\n  openModal(popupEditWindow);\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n});\n\n// Обработчик нажатия на кнопку добавления карточки\nprofileAddButton.addEventListener('click', function(){\n  const newCardForm = popupNewCard.querySelector('.popup__form')\n  clearValidation(newCardForm, validationConfig);\n  openModal(popupNewCard)});\n\npopupsModal.forEach((popup) => {\n  popup.addEventListener('click', function(evt) {\n    if (evt.target.classList.contains('popup') || evt.target.classList.contains('popup__close')) {\n      closeModal(popup)\n    }\n  });\n});\n\n// Прикрепляем обработчик к форме: он будет следить за событием “submit” - «отправка»\nformElement.addEventListener('submit', handleFormSubmit);\n\ncreateCardFormElement.addEventListener('submit', handleFormCreateCard);\n\neditProfileImageFormElement.addEventListener('submit', handleFormEditProfileImage);\n\n// Функция обработки клика по карточке (открытие изображения в модальном окне)\nexport function handleClickCard(item, title) {\n  cardImage.src = item.src;\n  cardImage.alt = item.alt;\n  cardImageCaption.textContent = title;\n  openModal(modalImage);\n}\n\n// Функция, которая отвечает за включение валидации всех форм.\n// Она принимает все нужные функциям классы\n// и селекторы элементов как объект настроек.\nexport const validationConfig = ({\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'button_inactive',\n  inputErrorClass: 'form__input_type_error',\n  errorClass: 'form__input-error_active'\n});\n\nenableValidation(validationConfig);\n\n// @todo: Темплейт карточки\n\n/*createCard('Это имя', 'А это ссылка');*/\n// @todo: DOM узлы\n\n// @todo: Функция создания карточки\n\n// @todo: Функция удаления карточки\n\n// @todo: Вывести карточки на страницу\n","import './pages/index.css'; // добавьте импорт главного файла стилей\nimport './scripts/index.js';\nimport './components/api.js'\nconsole.log('Hello, World!')\n\n\n\n// Стрелочная функция. Не запнётся ли на ней Internet Explorer?\n// const doubledNumbers = numbers.map(number => number * 2);\n\n"],"names":["myToken","serverAdress","handleResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","createCard","item","handleClickCard","handleLikeCard","userId","cardElement","cloneNode","cardTitle","cardImage","src","link","alt","name","textContent","deleteButton","owner","_id","classList","add","addEventListener","card","fetch","method","headers","authorization","then","remove","catch","err","console","log","cardLikeCounter","likes","length","cardLikeButton","some","user","isLikedCard","contains","button","counter","toggle","body","JSON","stringify","data","deleteLikeCard","openModal","popup","closeByEscape","closeModal","removeEventListener","evt","key","hideInputError","formElement","inputElement","validationConfig","errorElement","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","inactiveButtonClass","removeAttribute","setAttribute","clearValidation","querySelectorAll","forEach","modalImage","cardImageCaption","editButton","placesList","popupEditWindow","profileAddButton","popupNewCard","popupsModal","nameInput","jobInput","createCardFormElement","cardNameInput","cardUrlInput","profileTitle","profileDescription","profileImage","profileImageEdit","popupProfileImage","profileImageUrlInput","editProfileImageFormElement","renderLoading","isLoading","title","all","_ref","_ref2","userData","cardsArr","about","avatar","newCard","append","value","target","preventDefault","modalIsOpened","finally","saveButton","prepend","formSelector","inputSelector","submitButtonSelector","Array","from","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","enableValidation"],"sourceRoot":""}